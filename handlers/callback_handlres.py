
from aiogram import Router, types, F
from aiogram.types import Message
from keyboards.reply import main_keyboard
from keyboards.builders import get_carousel_keyboard, services
from utils.states import Form, add_row
from aiogram.fsm.context import FSMContext




router = Router()



@router.message(F.text == "üìã –£—Å–ª—É–≥–∏")
async def show_first_service(message: types.Message):
    await message.answer(
        services[0],
        reply_markup=get_carousel_keyboard(0)
    )

@router.callback_query(F.data.startswith("carousel:"))
async def process_carousel(callback: types.CallbackQuery):
    index = int(callback.data.split(":")[1])
    text = services[index]

    await callback.message.edit_text(
        text,
        reply_markup=get_carousel_keyboard(index)
    )
    await callback.answer()











@router.message(F.text == "üîß–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
async def show_services(message: types.Message):
    text = """
<b>üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>

<b>üë®‚Äçüíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Äì <code>Python</code>
‚Äì <code>JavaScript</code>
‚Äì <code>Node.js</code>
‚Äì <i>No-code —Ä–µ—à–µ–Ω–∏—è</i> (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

<b>üì° Telegram Bot API:</b>
–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º Telegram API.

<b>üß† –§—Ä–µ–π–º–≤–æ—Ä–∫–∏:</b>
‚Äì <code>aiogram</code> (v2 / v3)
‚Äì <code>FastAPI / Flask</code> (–¥–ª—è API –∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)

<b>üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>
‚Äì <code>PostgreSQL</code>, <code>Redis</code>, <code>MongoDB</code>

<b>‚òÅÔ∏è –•–æ—Å—Ç–∏–Ω–≥ –∏ –¥–µ–ø–ª–æ–π:</b>
‚Äì <code>Railway</code>, <code>Render</code>, <code>Docker</code>, VPS
"""
    await message.answer(text, parse_mode="HTML", reply_markup=main_keyboard())







@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)


@router.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)


@router.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:")
    await state.set_state(Form.comment)


@router.message(Form.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()

    name = data["name"]
    phone = data["phone"]
    comment = data["comment"]

    success = add_row(name, phone, comment)

    if success:
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()








@router.message(F.text == "üì±–°–≤—è–∑—å")
async def show_services(message: types.Message):
    text = """
<b>üìç –ê–¥—Ä–µ—Å:</b> –≥. –ë–∏—à–∫–µ–∫, —É–ª. –ò–±—Ä–∞–∏–º–æ–≤–∞ 103\n
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:+996700123456">+996 700 123 456</a>\n
<b>üì© Email:</b> <a href="mailto:info@example.com">info@example.com</a>\n
<b>üåê –°–∞–π—Ç:</b> <a href="https://example.com">example.com</a>\n
<b>üì± Telegram:</b> <a href="https://t.me/b.osmn">@b.osmn</a>
"""

    await message.answer(text, parse_mode="HTML", reply_markup=main_keyboard())
